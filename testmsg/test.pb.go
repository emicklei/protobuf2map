// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: test.proto

package testmsg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Things int32

const (
	Things_BEER_CAP Things = 0
	Things_HEAD_CAP Things = 1
	Things_JOKE     Things = 2
)

// Enum value maps for Things.
var (
	Things_name = map[int32]string{
		0: "BEER_CAP",
		1: "HEAD_CAP",
		2: "JOKE",
	}
	Things_value = map[string]int32{
		"BEER_CAP": 0,
		"HEAD_CAP": 1,
		"JOKE":     2,
	}
)

func (x Things) Enum() *Things {
	p := new(Things)
	*p = x
	return p
}

func (x Things) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Things) Descriptor() protoreflect.EnumDescriptor {
	return file_test_proto_enumTypes[0].Descriptor()
}

func (Things) Type() protoreflect.EnumType {
	return &file_test_proto_enumTypes[0]
}

func (x Things) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Things.Descriptor instead.
func (Things) EnumDescriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

type Test struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldInt32  int32   `protobuf:"varint,1,opt,name=field_int32,json=fieldInt32,proto3" json:"field_int32,omitempty"`
	FieldString string  `protobuf:"bytes,2,opt,name=field_string,json=fieldString,proto3" json:"field_string,omitempty"`
	FieldInt64  int64   `protobuf:"varint,3,opt,name=field_int64,json=fieldInt64,proto3" json:"field_int64,omitempty"`
	FieldFloat  float32 `protobuf:"fixed32,4,opt,name=field_float,json=fieldFloat,proto3" json:"field_float,omitempty"`
	FieldBool   bool    `protobuf:"varint,5,opt,name=field_bool,json=fieldBool,proto3" json:"field_bool,omitempty"`
	// unsigned
	FieldUint64 uint64 `protobuf:"varint,6,opt,name=field_uint64,json=fieldUint64,proto3" json:"field_uint64,omitempty"`
	FieldUint32 uint32 `protobuf:"varint,7,opt,name=field_uint32,json=fieldUint32,proto3" json:"field_uint32,omitempty"`
	// repeated
	FieldInt32S  []int32   `protobuf:"varint,31,rep,packed,name=field_int32s,json=fieldInt32s,proto3" json:"field_int32s,omitempty"`
	FieldStrings []string  `protobuf:"bytes,32,rep,name=field_strings,json=fieldStrings,proto3" json:"field_strings,omitempty"`
	FieldInt64S  []int64   `protobuf:"varint,33,rep,packed,name=field_int64s,json=fieldInt64s,proto3" json:"field_int64s,omitempty"`
	FieldFloats  []float32 `protobuf:"fixed32,34,rep,packed,name=field_floats,json=fieldFloats,proto3" json:"field_floats,omitempty"`
	FieldBools   []bool    `protobuf:"varint,35,rep,packed,name=field_bools,json=fieldBools,proto3" json:"field_bools,omitempty"`
	// nested
	FieldFoo  *Foo   `protobuf:"bytes,61,opt,name=field_foo,json=fieldFoo,proto3" json:"field_foo,omitempty"`
	FieldFoos []*Foo `protobuf:"bytes,62,rep,name=field_foos,json=fieldFoos,proto3" json:"field_foos,omitempty"`
	// map
	FieldMapStringInt32 map[string]int32 `protobuf:"bytes,70,rep,name=field_map_string_int32,json=fieldMapStringInt32,proto3" json:"field_map_string_int32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FieldMapInt64_Foo   map[int64]*Foo   `protobuf:"bytes,71,rep,name=field_map_int64_Foo,json=fieldMapInt64Foo,proto3" json:"field_map_int64_Foo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FieldEnum           Things           `protobuf:"varint,80,opt,name=field_enum,json=fieldEnum,proto3,enum=testmsg.Things" json:"field_enum,omitempty"`
}

func (x *Test) Reset() {
	*x = Test{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Test) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Test) ProtoMessage() {}

func (x *Test) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Test.ProtoReflect.Descriptor instead.
func (*Test) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{0}
}

func (x *Test) GetFieldInt32() int32 {
	if x != nil {
		return x.FieldInt32
	}
	return 0
}

func (x *Test) GetFieldString() string {
	if x != nil {
		return x.FieldString
	}
	return ""
}

func (x *Test) GetFieldInt64() int64 {
	if x != nil {
		return x.FieldInt64
	}
	return 0
}

func (x *Test) GetFieldFloat() float32 {
	if x != nil {
		return x.FieldFloat
	}
	return 0
}

func (x *Test) GetFieldBool() bool {
	if x != nil {
		return x.FieldBool
	}
	return false
}

func (x *Test) GetFieldUint64() uint64 {
	if x != nil {
		return x.FieldUint64
	}
	return 0
}

func (x *Test) GetFieldUint32() uint32 {
	if x != nil {
		return x.FieldUint32
	}
	return 0
}

func (x *Test) GetFieldInt32S() []int32 {
	if x != nil {
		return x.FieldInt32S
	}
	return nil
}

func (x *Test) GetFieldStrings() []string {
	if x != nil {
		return x.FieldStrings
	}
	return nil
}

func (x *Test) GetFieldInt64S() []int64 {
	if x != nil {
		return x.FieldInt64S
	}
	return nil
}

func (x *Test) GetFieldFloats() []float32 {
	if x != nil {
		return x.FieldFloats
	}
	return nil
}

func (x *Test) GetFieldBools() []bool {
	if x != nil {
		return x.FieldBools
	}
	return nil
}

func (x *Test) GetFieldFoo() *Foo {
	if x != nil {
		return x.FieldFoo
	}
	return nil
}

func (x *Test) GetFieldFoos() []*Foo {
	if x != nil {
		return x.FieldFoos
	}
	return nil
}

func (x *Test) GetFieldMapStringInt32() map[string]int32 {
	if x != nil {
		return x.FieldMapStringInt32
	}
	return nil
}

func (x *Test) GetFieldMapInt64_Foo() map[int64]*Foo {
	if x != nil {
		return x.FieldMapInt64_Foo
	}
	return nil
}

func (x *Test) GetFieldEnum() Things {
	if x != nil {
		return x.FieldEnum
	}
	return Things_BEER_CAP
}

type Foo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Foo string `protobuf:"bytes,1,opt,name=foo,proto3" json:"foo,omitempty"`
}

func (x *Foo) Reset() {
	*x = Foo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Foo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Foo) ProtoMessage() {}

func (x *Foo) ProtoReflect() protoreflect.Message {
	mi := &file_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Foo.ProtoReflect.Descriptor instead.
func (*Foo) Descriptor() ([]byte, []int) {
	return file_test_proto_rawDescGZIP(), []int{1}
}

func (x *Foo) GetFoo() string {
	if x != nil {
		return x.Foo
	}
	return ""
}

var File_test_proto protoreflect.FileDescriptor

var file_test_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x74, 0x65,
	0x73, 0x74, 0x6d, 0x73, 0x67, 0x22, 0xf4, 0x06, 0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x21, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x20, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x73, 0x18, 0x21, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x23, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x29, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x66, 0x6f, 0x6f, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x6d, 0x73, 0x67, 0x2e, 0x46, 0x6f, 0x6f, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x46, 0x6f, 0x6f, 0x12, 0x2b, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x66, 0x6f, 0x6f,
	0x73, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x6d, 0x73,
	0x67, 0x2e, 0x46, 0x6f, 0x6f, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x6f, 0x6f, 0x73,
	0x12, 0x5b, 0x0a, 0x16, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x46, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x52, 0x0a,
	0x13, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x46, 0x6f, 0x6f, 0x18, 0x47, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x6d, 0x73, 0x67, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x6f, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x6f,
	0x6f, 0x12, 0x2e, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x50, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x6d, 0x73, 0x67, 0x2e,
	0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x1a, 0x46, 0x0a, 0x18, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x51, 0x0a, 0x15, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x6f, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x6d, 0x73, 0x67, 0x2e, 0x46, 0x6f,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x17, 0x0a, 0x03,
	0x46, 0x6f, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x6f, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x66, 0x6f, 0x6f, 0x2a, 0x2e, 0x0a, 0x06, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x0c, 0x0a, 0x08, 0x42, 0x45, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x50, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x48, 0x45, 0x41, 0x44, 0x5f, 0x43, 0x41, 0x50, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4a,
	0x4f, 0x4b, 0x45, 0x10, 0x02, 0x42, 0x0a, 0x5a, 0x08, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x6d, 0x73,
	0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_test_proto_rawDescOnce sync.Once
	file_test_proto_rawDescData = file_test_proto_rawDesc
)

func file_test_proto_rawDescGZIP() []byte {
	file_test_proto_rawDescOnce.Do(func() {
		file_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_test_proto_rawDescData)
	})
	return file_test_proto_rawDescData
}

var file_test_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_test_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_test_proto_goTypes = []interface{}{
	(Things)(0),  // 0: testmsg.Things
	(*Test)(nil), // 1: testmsg.Test
	(*Foo)(nil),  // 2: testmsg.Foo
	nil,          // 3: testmsg.Test.FieldMapStringInt32Entry
	nil,          // 4: testmsg.Test.FieldMapInt64FooEntry
}
var file_test_proto_depIdxs = []int32{
	2, // 0: testmsg.Test.field_foo:type_name -> testmsg.Foo
	2, // 1: testmsg.Test.field_foos:type_name -> testmsg.Foo
	3, // 2: testmsg.Test.field_map_string_int32:type_name -> testmsg.Test.FieldMapStringInt32Entry
	4, // 3: testmsg.Test.field_map_int64_Foo:type_name -> testmsg.Test.FieldMapInt64FooEntry
	0, // 4: testmsg.Test.field_enum:type_name -> testmsg.Things
	2, // 5: testmsg.Test.FieldMapInt64FooEntry.value:type_name -> testmsg.Foo
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_test_proto_init() }
func file_test_proto_init() {
	if File_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Test); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Foo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_test_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_test_proto_goTypes,
		DependencyIndexes: file_test_proto_depIdxs,
		EnumInfos:         file_test_proto_enumTypes,
		MessageInfos:      file_test_proto_msgTypes,
	}.Build()
	File_test_proto = out.File
	file_test_proto_rawDesc = nil
	file_test_proto_goTypes = nil
	file_test_proto_depIdxs = nil
}
