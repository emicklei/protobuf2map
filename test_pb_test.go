// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test.proto

package protobuf2map

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Things int32

const (
	Things_BEER_CAP Things = 0
	Things_HEAD_CAP Things = 1
	Things_JOKE     Things = 2
)

var Things_name = map[int32]string{
	0: "BEER_CAP",
	1: "HEAD_CAP",
	2: "JOKE",
}

var Things_value = map[string]int32{
	"BEER_CAP": 0,
	"HEAD_CAP": 1,
	"JOKE":     2,
}

func (x Things) String() string {
	return proto.EnumName(Things_name, int32(x))
}

func (Things) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}

type Test struct {
	FieldInt32  int32   `protobuf:"varint,1,opt,name=field_int32,json=fieldInt32,proto3" json:"field_int32,omitempty"`
	FieldString string  `protobuf:"bytes,2,opt,name=field_string,json=fieldString,proto3" json:"field_string,omitempty"`
	FieldInt64  int64   `protobuf:"varint,3,opt,name=field_int64,json=fieldInt64,proto3" json:"field_int64,omitempty"`
	FieldFloat  float32 `protobuf:"fixed32,4,opt,name=field_float,json=fieldFloat,proto3" json:"field_float,omitempty"`
	FieldBool   bool    `protobuf:"varint,5,opt,name=field_bool,json=fieldBool,proto3" json:"field_bool,omitempty"`
	// unsigned
	FieldUint64 uint64 `protobuf:"varint,6,opt,name=field_uint64,json=fieldUint64,proto3" json:"field_uint64,omitempty"`
	FieldUint32 uint32 `protobuf:"varint,7,opt,name=field_uint32,json=fieldUint32,proto3" json:"field_uint32,omitempty"`
	// repeated
	FieldInt32S  []int32   `protobuf:"varint,31,rep,packed,name=field_int32s,json=fieldInt32s,proto3" json:"field_int32s,omitempty"`
	FieldStrings []string  `protobuf:"bytes,32,rep,name=field_strings,json=fieldStrings,proto3" json:"field_strings,omitempty"`
	FieldInt64S  []int64   `protobuf:"varint,33,rep,packed,name=field_int64s,json=fieldInt64s,proto3" json:"field_int64s,omitempty"`
	FieldFloats  []float32 `protobuf:"fixed32,34,rep,packed,name=field_floats,json=fieldFloats,proto3" json:"field_floats,omitempty"`
	FieldBools   []bool    `protobuf:"varint,35,rep,packed,name=field_bools,json=fieldBools,proto3" json:"field_bools,omitempty"`
	// nested
	FieldFoo  *Foo   `protobuf:"bytes,61,opt,name=field_foo,json=fieldFoo,proto3" json:"field_foo,omitempty"`
	FieldFoos []*Foo `protobuf:"bytes,62,rep,name=field_foos,json=fieldFoos,proto3" json:"field_foos,omitempty"`
	// map
	FieldMapStringInt32  map[string]int32 `protobuf:"bytes,70,rep,name=field_map_string_int32,json=fieldMapStringInt32,proto3" json:"field_map_string_int32,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	FieldMapInt64_Foo    map[int64]*Foo   `protobuf:"bytes,71,rep,name=field_map_int64_Foo,json=fieldMapInt64Foo,proto3" json:"field_map_int64_Foo,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FieldEnum            Things           `protobuf:"varint,80,opt,name=field_enum,json=fieldEnum,proto3,enum=protobuf2map.Things" json:"field_enum,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Test) Reset()         { *m = Test{} }
func (m *Test) String() string { return proto.CompactTextString(m) }
func (*Test) ProtoMessage()    {}
func (*Test) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{0}
}

func (m *Test) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Test.Unmarshal(m, b)
}
func (m *Test) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Test.Marshal(b, m, deterministic)
}
func (m *Test) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test.Merge(m, src)
}
func (m *Test) XXX_Size() int {
	return xxx_messageInfo_Test.Size(m)
}
func (m *Test) XXX_DiscardUnknown() {
	xxx_messageInfo_Test.DiscardUnknown(m)
}

var xxx_messageInfo_Test proto.InternalMessageInfo

func (m *Test) GetFieldInt32() int32 {
	if m != nil {
		return m.FieldInt32
	}
	return 0
}

func (m *Test) GetFieldString() string {
	if m != nil {
		return m.FieldString
	}
	return ""
}

func (m *Test) GetFieldInt64() int64 {
	if m != nil {
		return m.FieldInt64
	}
	return 0
}

func (m *Test) GetFieldFloat() float32 {
	if m != nil {
		return m.FieldFloat
	}
	return 0
}

func (m *Test) GetFieldBool() bool {
	if m != nil {
		return m.FieldBool
	}
	return false
}

func (m *Test) GetFieldUint64() uint64 {
	if m != nil {
		return m.FieldUint64
	}
	return 0
}

func (m *Test) GetFieldUint32() uint32 {
	if m != nil {
		return m.FieldUint32
	}
	return 0
}

func (m *Test) GetFieldInt32S() []int32 {
	if m != nil {
		return m.FieldInt32S
	}
	return nil
}

func (m *Test) GetFieldStrings() []string {
	if m != nil {
		return m.FieldStrings
	}
	return nil
}

func (m *Test) GetFieldInt64S() []int64 {
	if m != nil {
		return m.FieldInt64S
	}
	return nil
}

func (m *Test) GetFieldFloats() []float32 {
	if m != nil {
		return m.FieldFloats
	}
	return nil
}

func (m *Test) GetFieldBools() []bool {
	if m != nil {
		return m.FieldBools
	}
	return nil
}

func (m *Test) GetFieldFoo() *Foo {
	if m != nil {
		return m.FieldFoo
	}
	return nil
}

func (m *Test) GetFieldFoos() []*Foo {
	if m != nil {
		return m.FieldFoos
	}
	return nil
}

func (m *Test) GetFieldMapStringInt32() map[string]int32 {
	if m != nil {
		return m.FieldMapStringInt32
	}
	return nil
}

func (m *Test) GetFieldMapInt64_Foo() map[int64]*Foo {
	if m != nil {
		return m.FieldMapInt64_Foo
	}
	return nil
}

func (m *Test) GetFieldEnum() Things {
	if m != nil {
		return m.FieldEnum
	}
	return Things_BEER_CAP
}

type Foo struct {
	Foo                  string   `protobuf:"bytes,1,opt,name=foo,proto3" json:"foo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Foo) Reset()         { *m = Foo{} }
func (m *Foo) String() string { return proto.CompactTextString(m) }
func (*Foo) ProtoMessage()    {}
func (*Foo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c161fcfdc0c3ff1e, []int{1}
}

func (m *Foo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Foo.Unmarshal(m, b)
}
func (m *Foo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Foo.Marshal(b, m, deterministic)
}
func (m *Foo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Foo.Merge(m, src)
}
func (m *Foo) XXX_Size() int {
	return xxx_messageInfo_Foo.Size(m)
}
func (m *Foo) XXX_DiscardUnknown() {
	xxx_messageInfo_Foo.DiscardUnknown(m)
}

var xxx_messageInfo_Foo proto.InternalMessageInfo

func (m *Foo) GetFoo() string {
	if m != nil {
		return m.Foo
	}
	return ""
}

func init() {
	proto.RegisterEnum("protobuf2map.Things", Things_name, Things_value)
	proto.RegisterType((*Test)(nil), "protobuf2map.Test")
	proto.RegisterMapType((map[int64]*Foo)(nil), "protobuf2map.Test.FieldMapInt64FooEntry")
	proto.RegisterMapType((map[string]int32)(nil), "protobuf2map.Test.FieldMapStringInt32Entry")
	proto.RegisterType((*Foo)(nil), "protobuf2map.Foo")
}

func init() { proto.RegisterFile("test.proto", fileDescriptor_c161fcfdc0c3ff1e) }

var fileDescriptor_c161fcfdc0c3ff1e = []byte{
	// 502 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0x6d, 0x8b, 0xd3, 0x40,
	0x10, 0xc7, 0xdd, 0x6e, 0xdb, 0x6b, 0xe6, 0x7a, 0x12, 0xf7, 0x4e, 0x5d, 0x0e, 0xe4, 0xf6, 0x7a,
	0x2f, 0x5c, 0x14, 0x82, 0xa4, 0xa5, 0x88, 0xa0, 0x70, 0xa7, 0x89, 0x4f, 0x88, 0x47, 0x7c, 0x7a,
	0x59, 0x53, 0x4c, 0xb4, 0x98, 0x66, 0x4a, 0x37, 0x11, 0xee, 0x6b, 0xf8, 0x89, 0x65, 0x1f, 0x4a,
	0xd2, 0xb3, 0xfa, 0xaa, 0x9d, 0xc9, 0x7f, 0x7e, 0x3b, 0xff, 0x99, 0x01, 0xa8, 0x32, 0x55, 0x05,
	0xab, 0x35, 0x56, 0xc8, 0x86, 0xe6, 0x67, 0x5e, 0xe7, 0xe1, 0x32, 0x5d, 0x8d, 0x7e, 0xef, 0x41,
	0xf7, 0x63, 0xa6, 0x2a, 0x76, 0x02, 0xfb, 0xf9, 0x22, 0x2b, 0xbe, 0xcd, 0x16, 0x65, 0x35, 0x0e,
	0x39, 0x11, 0x44, 0xf6, 0x12, 0x30, 0xa9, 0xd7, 0x3a, 0xc3, 0x4e, 0x61, 0x68, 0x05, 0xaa, 0x5a,
	0x2f, 0xca, 0xef, 0xbc, 0x23, 0x88, 0xf4, 0x12, 0x5b, 0xf4, 0xc1, 0xa4, 0xb6, 0x18, 0xd3, 0x09,
	0xa7, 0x82, 0x48, 0xda, 0x30, 0xa6, 0x93, 0x46, 0x90, 0x17, 0x98, 0x56, 0xbc, 0x2b, 0x88, 0xec,
	0x38, 0x41, 0xac, 0x33, 0xec, 0x1e, 0xd8, 0x68, 0x36, 0x47, 0x2c, 0x78, 0x4f, 0x10, 0x39, 0x48,
	0x3c, 0x93, 0xb9, 0x40, 0x2c, 0x9a, 0x1e, 0x6a, 0xfb, 0x42, 0x5f, 0x10, 0xd9, 0x75, 0x3d, 0x7c,
	0x32, 0xa9, 0x6d, 0xc9, 0x38, 0xe4, 0x7b, 0x82, 0xc8, 0x83, 0x96, 0xa4, 0xed, 0xc4, 0x84, 0x8a,
	0x9f, 0x08, 0x2a, 0x7b, 0x4e, 0x62, 0xbc, 0x2a, 0x76, 0x06, 0x07, 0x6d, 0xb3, 0x8a, 0x0b, 0x41,
	0xa5, 0x97, 0x0c, 0x5b, 0x6e, 0xd5, 0x16, 0x67, 0x3a, 0x51, 0xfc, 0x54, 0x50, 0x49, 0x1b, 0xce,
	0x74, 0xd2, 0x92, 0x18, 0xc3, 0x8a, 0x8f, 0x04, 0x95, 0x1d, 0x27, 0x31, 0x8e, 0x55, 0x33, 0x13,
	0x6d, 0x59, 0xf1, 0x33, 0x41, 0xe5, 0xc0, 0xcd, 0x44, 0x7b, 0x56, 0x2c, 0x00, 0xcf, 0x31, 0x10,
	0xf9, 0x53, 0x41, 0xe4, 0x7e, 0x78, 0x2b, 0x68, 0x2f, 0x31, 0x88, 0x11, 0x93, 0x81, 0x65, 0x22,
	0xb2, 0x47, 0x9b, 0x19, 0xe6, 0x88, 0x8a, 0x3f, 0x13, 0x74, 0x77, 0x81, 0xb7, 0x29, 0x50, 0xec,
	0x2b, 0xdc, 0xb1, 0x15, 0xcb, 0x74, 0xe5, 0x1c, 0xbb, 0x33, 0x88, 0x4d, 0xf5, 0xc3, 0xed, 0x6a,
	0x7d, 0x2f, 0x41, 0xac, 0x0b, 0xde, 0xa5, 0x2b, 0x3b, 0x0c, 0x33, 0xb6, 0xa8, 0xac, 0xd6, 0x57,
	0xc9, 0x61, 0xfe, 0xf7, 0x17, 0xf6, 0x05, 0x0e, 0x9b, 0x17, 0xcc, 0xb8, 0x66, 0x31, 0x22, 0x7f,
	0x69, 0xf0, 0xf2, 0x3f, 0x78, 0x33, 0xc7, 0x18, 0xd1, 0xb2, 0xfd, 0xfc, 0x5a, 0x9a, 0x8d, 0x37,
	0x66, 0xb3, 0xb2, 0x5e, 0xf2, 0x4b, 0x41, 0xe4, 0xcd, 0xf0, 0xe8, 0x1a, 0xef, 0x87, 0xde, 0x96,
	0xf3, 0x1b, 0x95, 0xf5, 0xf2, 0x38, 0x06, 0xfe, 0xaf, 0xf6, 0x99, 0x0f, 0xf4, 0x67, 0x76, 0x65,
	0xee, 0xdf, 0x4b, 0xf4, 0x5f, 0x76, 0x04, 0xbd, 0x5f, 0x69, 0x51, 0x67, 0xe6, 0xe2, 0x7b, 0x89,
	0x0d, 0x9e, 0x74, 0x1e, 0x93, 0xe3, 0xcf, 0x70, 0x7b, 0x67, 0x9f, 0x6d, 0x08, 0xb5, 0x90, 0xfb,
	0x6d, 0xc8, 0xce, 0x7d, 0x34, 0xdc, 0xd1, 0x5d, 0xa0, 0xda, 0x9b, 0x0f, 0x54, 0xaf, 0xdc, 0xb5,
	0x92, 0x23, 0x3e, 0x08, 0xa0, 0x6f, 0xdd, 0xb0, 0x21, 0x0c, 0x2e, 0xa2, 0x28, 0x99, 0x3d, 0x3f,
	0xbf, 0xf4, 0x6f, 0xe8, 0xe8, 0x55, 0x74, 0xfe, 0xc2, 0x44, 0x84, 0x0d, 0xa0, 0xfb, 0xe6, 0xfd,
	0xdb, 0xc8, 0xef, 0xcc, 0xfb, 0xe6, 0x95, 0xf1, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x34, 0x8e,
	0xf6, 0x5f, 0x00, 0x04, 0x00, 0x00,
}
